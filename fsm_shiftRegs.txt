/* Raul Lora Rivera - v1 - FSM señales de seleccion registros estatico y dinamico
* FSM shift registers
*/

module fsm (
    CLK,       // Reloj del sistema
    RST_N,     // Reset activo bajo
    start,     // Entrada para iniciar la máquina de estados
    state // Salida que indica el estado actual (3 bits para 5 estados)
);

    // Ports definition
    input wire CLK;
    input wire RST_N;
    input wire start;
    output reg [2:0] state;

    // Definición de los estados (5 estados)
    parameter S0 = 3'b000;
    parameter S1 = 3'b001;
    parameter S2 = 3'b010;
    parameter S3 = 3'b011;
    parameter S4 = 3'b100;

    // Estado actual y siguiente
    reg [2:0] current_state, next_state;

    // Lógica de transición de estados (cambiar el estado)
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            current_state <= S0; // Al reset, se va al estado S0
        end else begin
            current_state <= next_state; // Cambiar al siguiente estado
        end
    end

    // Lógica de transición de estados (determinación del siguiente estado)
    always @(*) begin
        case (current_state)
            S0: next_state = (start) ? S1 : S0; // Si start es 1, pasa a S1, si no sigue en S0
            S1: next_state = S2;                 // De S1 a S2
            S2: next_state = S3;                 // De S2 a S3
            S3: next_state = S4;                 // De S3 a S4
            S4: next_state = S0;                 // De S4 a S0 (ciclo)
            default: next_state = S0;            // Default: Vuelve a S0
        endcase
    end

    // Salida: mostrar el estado actual
    always @(posedge clk) begin
        state <= current_state;
    end

endmodule
